#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#include "../raycommon.glsl"
#include "../wavefront.glsl"
#include "../random.glsl"

layout(location = 0) callableDataInEXT materialCall mc;

layout(binding = 1, set = 1, scalar) buffer MatColorBufferObject
{
  WaveFrontMaterial m[];
}
materials[];

layout(binding = 2, set = 1, scalar) buffer ScnDesc
{
  sceneDesc i[];
}
scnDesc;

layout(binding = 3, set = 1) uniform sampler2D textureSamplers[];
layout(binding = 4, set = 1) buffer MatIndexColorBuffer
{
  int i[];
}
matIndex[];

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  vec3  lightDirection;
  float lightSpotCutoff;
  float lightSpotOuterCutoff;
  int   lightType;
};

void main()
{


  const int               matIdx  = matIndex[nonuniformEXT(mc.objId)].i[mc.pId];
  const WaveFrontMaterial mat     = materials[nonuniformEXT(mc.objId)].m[matIdx];
  uint              txtId   = 0;
   vec3              diffuse = mat.diffuse;
  if(mat.textureId >= 0)
  {
    txtId = mat.textureId + scnDesc.i[mc.instID].txtOffset;
    diffuse *= texture(textureSamplers[nonuniformEXT(txtId)], mc.texCoord).xyz;
  }
  mc.eval_color = diffuse * max(dot(mc.normal, mc.inDir), 0.0) / M_PI;
  const LocalCoords coords = gen_local_coords(mc.normal);
  sample_cosine_hemisphere(coords, rnd(mc.seed), rnd(mc.seed), mc);
  const vec3 color = diffuse * (max(dot(mc.sample_in, coords.n), 0.0f));
  
  make_sample(mc.sample_in, mc.sample_pdf, color, mc.normal, mc);
  mc.pdf_pdf = dot(mc.inDir, mc.normal) / M_PI;

}