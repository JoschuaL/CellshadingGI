#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#include "../raycommon.glsl"
#include "../wavefront.glsl"
#include "../random.glsl"

layout(location = 0) callableDataInEXT directSampleCall dsc;

layout(binding = 1, set = 1, scalar) buffer MatColorBufferObject
{
  WaveFrontMaterial m[];
}
materials[];

layout(binding = 2, set = 1, scalar) buffer ScnDesc
{
  sceneDesc i[];
}
scnDesc;

layout(binding = 3, set = 1) uniform sampler2D textureSamplers[];
layout(binding = 4, set = 1) buffer MatIndexColorBuffer
{
  int i[];
}
matIndex[];

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  vec3  lightDirection;
  float lightSpotCutoff;
  float lightSpotOuterCutoff;
  int   lightType;
};

void main()
{
    vec3 d1        = dsc.li.v1.xyz - dsc.li.v0.xyz;
    vec3 d2        = dsc.li.v2.xyz - dsc.li.v0.xyz;
    vec3 n = cross(d1, d2);
    float len = length(n);
    float area = len * 0.5;
    float inv_area = 1.0 / area;
    n *= inv_area * 0.5;
      
     

      float u = rnd(dsc.seed);
      float v = rnd(dsc.seed);

      vec3 lpos = u + v < 1.0 ? dsc.li.v0.xyz + (u * d1) + (v * d2) :
                                  dsc.li.v0.xyz + ((1.0 - u) * d1) + ((1.0 - v) * d2);


      vec3 pos = offset_ray(offset_ray(lpos, n), n);

      vec3 dir = dsc.from - pos;

      float cos_v = dot(dir, n) / length(dir);

      make_direct_sample(pos, dsc.li.color.xyz, inv_area, cos_v / M_PI, cos_v, dsc);
}